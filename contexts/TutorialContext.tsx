/**
 * ====================================
 * TUTORIAL CONTEXT
 * Gerencia estado e l√≥gica do tutorial completo
 * ====================================
 */

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { 
  TutorialState, 
  TutorialStepConfig, 
  TutorialLevelReward,
  TutorialLevel,
  TutorialStepId 
} from '@/types/tutorial.types';
import { useBadges } from './BadgeContext';

/**
 * Configura√ß√£o completa dos 15 passos do tutorial
 */
const TUTORIAL_STEPS: TutorialStepConfig[] = [
  // ========== N√çVEL 1: VERIFICADOR INICIANTE ==========
  {
    id: 'welcome',
    level: 1,
    stepInLevel: 1,
    title: 'Tutorial Completo CheckNow',
    description: 'Voc√™ est√° prestes a se tornar um MESTRE em verifica√ß√£o de not√≠cias!\n\nüìä 15 passos para dominar\nüèÜ 4 badges para desbloquear\nüéÅ Recompensas em cada n√≠vel',
    position: 'center',
    skipable: true,
    emoji: 'üéì'
  },
  {
    id: 'verify_text',
    level: 1,
    stepInLevel: 2,
    title: 'Sua Primeira Verifica√ß√£o',
    description: 'Cole ou digite uma not√≠cia aqui para verificar sua veracidade.',
    targetComponent: 'verifyInput',
    targetScreen: 'home',
    position: 'top',
    spotlightRadius: 100,
    requiresAction: false,
    actionType: 'input',
    skipable: false,
    tips: ['Experimente com: "Governo anuncia vacina contra c√¢ncer"'],
    emoji: 'üìù'
  },
  {
    id: 'verify_url',
    level: 1,
    stepInLevel: 3,
    title: 'Verifica√ß√£o de Links',
    description: 'Voc√™ tamb√©m pode verificar links de not√≠cias! Toque no bot√£o URL.',
    targetComponent: 'urlButton',
    targetScreen: 'home',
    position: 'top',
    spotlightRadius: 60,
    skipable: false,
    tips: ['Cole qualquer link de not√≠cia e veja a m√°gica!'],
    emoji: 'üîó'
  },
  {
    id: 'results',
    level: 1,
    stepInLevel: 4,
    title: 'Entendendo Resultados',
    description: '‚úÖ VERDADEIRO: Not√≠cia confirmada\n‚ùå FALSO: Fake news detectada\n‚ö†Ô∏è INDETERMINADO: Precisa de mais contexto\n\nRole para baixo e veja as FONTES e AN√ÅLISE completa!',
    position: 'center',
    skipable: false,
    emoji: 'üéØ'
  },
  
  // ========== N√çVEL 2: EXPLORADOR ==========
  {
    id: 'history_personal',
    level: 2,
    stepInLevel: 1,
    title: 'Seu Hist√≥rico',
    description: 'Todas suas verifica√ß√µes ficam salvas aqui! Toque na aba HIST√ìRICO.',
    targetComponent: 'historyTab',
    targetScreen: 'history',
    position: 'top',
    spotlightRadius: 70,
    skipable: false,
    tips: ['Veja suas verifica√ß√µes passadas, datas e status'],
    emoji: 'üìö'
  },
  {
    id: 'history_community',
    level: 2,
    stepInLevel: 2,
    title: 'Hist√≥rico Comunit√°rio',
    description: 'Veja o que OUTROS usu√°rios est√£o verificando! Troque para "Comunidade".',
    targetComponent: 'communityToggle',
    targetScreen: 'history',
    position: 'top',
    spotlightRadius: 80,
    skipable: false,
    tips: ['Descubra trending fakes e not√≠cias virais'],
    emoji: 'üåç'
  },
  {
    id: 'feed',
    level: 2,
    stepInLevel: 3,
    title: 'Central de Not√≠cias',
    description: 'Not√≠cias verificadas do Brasil! Toque na aba NOT√çCIAS.',
    targetComponent: 'feedTab',
    targetScreen: 'feed',
    position: 'top',
    spotlightRadius: 70,
    skipable: false,
    tips: [
      'Leia not√≠cias confi√°veis',
      'Puxe para atualizar',
      'Toque para ler completa'
    ],
    emoji: 'üì∞'
  },
  {
    id: 'news_detail',
    level: 2,
    stepInLevel: 4,
    title: 'Detalhes da Not√≠cia',
    description: 'Toque em qualquer not√≠cia para ler o conte√∫do completo, ver a fonte e a data de publica√ß√£o.',
    position: 'center',
    skipable: false,
    tips: ['Voc√™ pode verificar qualquer not√≠cia do feed!'],
    emoji: 'üìñ'
  },
  
  // ========== N√çVEL 3: ESTUDANTE DIGITAL ==========
  {
    id: 'education',
    level: 3,
    stepInLevel: 1,
    title: 'Educa√ß√£o Digital',
    description: 'Aprenda a identificar fake news como um PRO! Toque no √≠cone Educa√ß√£o.',
    targetComponent: 'educationButton',
    position: 'top',
    spotlightRadius: 60,
    skipable: false,
    tips: [
      'Guias de fact-checking',
      'T√©cnicas de verifica√ß√£o',
      'Quiz interativo'
    ],
    emoji: 'üìö'
  },
  {
    id: 'education_sections',
    level: 3,
    stepInLevel: 2,
    title: 'Guias Dispon√≠veis',
    description: 'Navegue pelas se√ß√µes educacionais:\n\n1Ô∏è‚É£ O que √© Fake News\n2Ô∏è‚É£ Como Identificar\n3Ô∏è‚É£ T√©cnicas de Manipula√ß√£o\n4Ô∏è‚É£ Checklist de Verifica√ß√£o\n5Ô∏è‚É£ Deepfakes e IA',
    position: 'center',
    skipable: false,
    tips: ['Leia pelo menos uma se√ß√£o!'],
    emoji: 'üìñ'
  },
  {
    id: 'quiz',
    level: 3,
    stepInLevel: 3,
    title: 'Teste Seus Conhecimentos',
    description: 'Hora de mostrar o que aprendeu!\n\nüìä 10 perguntas\n‚úÖ M√∫ltipla escolha\nüí° Feedback imediato\nüèÜ M√≠nimo 70% para passar',
    targetComponent: 'quizButton',
    position: 'center',
    spotlightRadius: 80,
    skipable: false,
    emoji: 'üéØ'
  },
  {
    id: 'quiz_complete',
    level: 3,
    stepInLevel: 4,
    title: 'Aprovado no Quiz!',
    description: 'üéâ Parab√©ns! Voc√™ passou no quiz!\n\nVoc√™ pode refazer quantas vezes quiser para melhorar sua nota.',
    position: 'center',
    skipable: false,
    emoji: 'üìä'
  },
  
  // ========== N√çVEL 4: MESTRE CHECKNOW ==========
  {
    id: 'account',
    level: 4,
    stepInLevel: 1,
    title: 'Personalize Sua Experi√™ncia',
    description: 'Gerencie sua conta, veja estat√≠sticas e ajuste prefer√™ncias. Toque na aba CONTA.',
    targetComponent: 'accountTab',
    targetScreen: 'account',
    position: 'top',
    spotlightRadius: 70,
    skipable: false,
    tips: [
      'Ver perfil',
      'Alterar tema',
      'Gerenciar Premium',
      'Ver badges conquistados'
    ],
    emoji: '‚öôÔ∏è'
  },
  {
    id: 'theme',
    level: 4,
    stepInLevel: 2,
    title: 'Modo Escuro',
    description: 'Proteja seus olhos! Experimente trocar entre:\n\n‚òÄÔ∏è Modo Claro (dia)\nüåô Modo Escuro (noite)\n\nSua prefer√™ncia √© salva automaticamente.',
    targetComponent: 'themeToggle',
    targetScreen: 'account',
    position: 'center',
    spotlightRadius: 70,
    skipable: false,
    emoji: 'üåì'
  },
  {
    id: 'premium',
    level: 4,
    stepInLevel: 3,
    title: 'CheckNow Premium',
    description: 'üéÅ Seu presente especial:\n3 DIAS DE PREMIUM GR√ÅTIS!\n\n‚úÖ Verifica√ß√µes ilimitadas\n‚úÖ Sem an√∫ncios\n‚úÖ Suporte priorit√°rio\n‚úÖ Acesso antecipado',
    position: 'center',
    skipable: false,
    emoji: '‚≠ê'
  }
];

/**
 * Recompensas por n√≠vel
 */
const LEVEL_REWARDS: TutorialLevelReward[] = [
  {
    level: 1,
    badgeId: 'verificador_iniciante',
    verificationCredits: 1,
    celebrationMessage: 'ü•â N√≠vel 1 Completo!\nVoc√™ √© um Verificador Iniciante!'
  },
  {
    level: 2,
    badgeId: 'explorador',
    verificationCredits: 2,
    celebrationMessage: 'ü•à N√≠vel 2 Completo!\nVoc√™ √© um Explorador!'
  },
  {
    level: 3,
    badgeId: 'estudante_digital',
    verificationCredits: 3,
    celebrationMessage: 'ü•á N√≠vel 3 Completo!\nVoc√™ √© um Estudante Digital!'
  },
  {
    level: 4,
    badgeId: 'mestre_checknow',
    verificationCredits: 0,
    premiumDays: 3,
    unlocks: ['certificate'],
    celebrationMessage: 'üíé Parab√©ns!\nVoc√™ √© um Mestre CheckNow!'
  }
];

interface TutorialContextType {
  state: TutorialState;
  startTutorial: () => void;
  nextStep: () => void;
  previousStep: () => void;
  skipTutorial: () => void;
  skipStep: () => void;
  completeTutorial: () => void;
  completeStep: (stepId: TutorialStepId) => void;
  resetTutorial: () => void;
  currentStepConfig: TutorialStepConfig | null;
  progressPercentage: number;
  currentLevelReward: TutorialLevelReward | null;
  allSteps: TutorialStepConfig[];
}

const TutorialContext = createContext<TutorialContextType | undefined>(undefined);

const STORAGE_KEY = '@checknow:tutorial_state';
const CREDITS_KEY = '@checknow:verification_credits_bonus';

export function TutorialProvider({ children }: { children: ReactNode }) {
  // Uso seguro do BadgeContext (pode n√£o estar dispon√≠vel imediatamente)
  let badgeContext: ReturnType<typeof useBadges> | undefined;
  try {
    badgeContext = useBadges();
  } catch (error) {
    console.warn('BadgeContext n√£o dispon√≠vel ainda');
    badgeContext = undefined;
  }
  
  const [state, setState] = useState<TutorialState>({
    isActive: false,
    currentStep: 'welcome',
    currentStepIndex: 0,
    totalSteps: TUTORIAL_STEPS.length,
    currentLevel: 1,
    completed: false,
    skipped: false,
    levelsCompleted: [],
    stepsCompleted: []
  });

  // Carrega estado salvo
  useEffect(() => {
    loadTutorialState();
  }, []);

  /**
   * Carrega estado do AsyncStorage
   */
  const loadTutorialState = async () => {
    try {
      const saved = await AsyncStorage.getItem(STORAGE_KEY);
      if (saved) {
        setState(JSON.parse(saved));
      }
    } catch (error) {
      console.error('Erro ao carregar tutorial:', error);
    }
  };

  /**
   * Salva estado no AsyncStorage
   */
  const saveTutorialState = async (newState: TutorialState) => {
    try {
      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(newState));
    } catch (error) {
      console.error('Erro ao salvar tutorial:', error);
    }
  };

  /**
   * Inicia o tutorial
   */
  const startTutorial = () => {
    const newState: TutorialState = {
      ...state,
      isActive: true,
      startedAt: Date.now(),
      currentStepIndex: 0,
      currentStep: TUTORIAL_STEPS[0].id,
      currentLevel: 1
    };
    
    setState(newState);
    saveTutorialState(newState);
    
    console.log('üéì Tutorial iniciado!');
  };

  /**
   * Pr√≥ximo passo
   */
  const nextStep = () => {
    const nextIndex = state.currentStepIndex + 1;
    
    // Completa passo atual
    const currentStep = TUTORIAL_STEPS[state.currentStepIndex];
    completeStep(currentStep.id);
    
    // Verifica se terminou
    if (nextIndex >= TUTORIAL_STEPS.length) {
      completeTutorial();
      return;
    }
    
    const nextStepConfig = TUTORIAL_STEPS[nextIndex];
    const newState: TutorialState = {
      ...state,
      currentStepIndex: nextIndex,
      currentStep: nextStepConfig.id,
      currentLevel: nextStepConfig.level
    };
    
    setState(newState);
    saveTutorialState(newState);
    
    // Verifica completude de n√≠vel
    checkLevelCompletion(nextStepConfig.level);
  };

  /**
   * Passo anterior
   */
  const previousStep = () => {
    if (state.currentStepIndex === 0) return;
    
    const prevIndex = state.currentStepIndex - 1;
    const prevStepConfig = TUTORIAL_STEPS[prevIndex];
    
    const newState: TutorialState = {
      ...state,
      currentStepIndex: prevIndex,
      currentStep: prevStepConfig.id,
      currentLevel: prevStepConfig.level
    };
    
    setState(newState);
    saveTutorialState(newState);
  };

  /**
   * Pular tutorial completo
   */
  const skipTutorial = async () => {
    const newState: TutorialState = {
      ...state,
      isActive: false,
      skipped: true
    };
    
    setState(newState);
    await saveTutorialState(newState);
    
    console.log('‚è≠Ô∏è Tutorial pulado');
  };

  /**
   * Pular passo atual
   */
  const skipStep = () => {
    nextStep();
  };

  /**
   * Completa um passo espec√≠fico
   */
  const completeStep = (stepId: TutorialStepId) => {
    if (state.stepsCompleted.includes(stepId)) return;
    
    const newState: TutorialState = {
      ...state,
      stepsCompleted: [...state.stepsCompleted, stepId]
    };
    
    setState(newState);
    saveTutorialState(newState);
  };

  /**
   * Verifica se n√≠vel foi completado
   */
  const checkLevelCompletion = async (level: TutorialLevel) => {
    // J√° completou esse n√≠vel?
    if (state.levelsCompleted.includes(level)) return;
    
    // Pega todos os passos do n√≠vel
    const levelSteps = TUTORIAL_STEPS.filter(s => s.level === level);
    
    // Verifica se todos foram completados
    const allCompleted = levelSteps.every(step => 
      state.stepsCompleted.includes(step.id) || 
      TUTORIAL_STEPS.findIndex(s => s.id === step.id) < state.currentStepIndex
    );
    
    if (allCompleted) {
      await completeLevel(level);
    }
  };

  /**
   * Completa um n√≠vel
   */
  const completeLevel = async (level: TutorialLevel) => {
    console.log(`üéâ N√≠vel ${level} completado!`);
    
    const reward = LEVEL_REWARDS.find(r => r.level === level);
    
    if (reward) {
      // Desbloqueia badge (se BadgeContext dispon√≠vel)
      if (badgeContext?.unlockBadge) {
        try {
          await badgeContext.unlockBadge(reward.badgeId);
        } catch (error) {
          console.error('Erro ao desbloquear badge:', error);
        }
      }
      
      // Adiciona cr√©ditos de verifica√ß√£o
      if (reward.verificationCredits > 0) {
        await addVerificationCredits(reward.verificationCredits);
      }
      
      // Ativa premium trial
      if (reward.premiumDays) {
        await activatePremiumTrial(reward.premiumDays);
      }
    }
    
    const newState: TutorialState = {
      ...state,
      levelsCompleted: [...state.levelsCompleted, level]
    };
    
    setState(newState);
    await saveTutorialState(newState);
  };

  /**
   * Completa tutorial
   */
  const completeTutorial = async () => {
    console.log('üéä Tutorial completado!');
    
    const newState: TutorialState = {
      ...state,
      isActive: false,
      completed: true,
      completedAt: Date.now()
    };
    
    setState(newState);
    await saveTutorialState(newState);
    
    // Gera certificado (implementar depois)
    // await generateCertificate();
  };

  /**
   * Reseta tutorial (apenas para debug)
   */
  const resetTutorial = async () => {
    await AsyncStorage.removeItem(STORAGE_KEY);
    await AsyncStorage.removeItem(CREDITS_KEY);
    
    setState({
      isActive: false,
      currentStep: 'welcome',
      currentStepIndex: 0,
      totalSteps: TUTORIAL_STEPS.length,
      currentLevel: 1,
      completed: false,
      skipped: false,
      levelsCompleted: [],
      stepsCompleted: []
    });
    
    console.log('üîÑ Tutorial resetado');
  };

  /**
   * Adiciona cr√©ditos de verifica√ß√£o
   */
  const addVerificationCredits = async (credits: number) => {
    try {
      const current = await AsyncStorage.getItem(CREDITS_KEY);
      const currentCredits = current ? parseInt(current) : 0;
      const newCredits = currentCredits + credits;
      
      await AsyncStorage.setItem(CREDITS_KEY, newCredits.toString());
      
      console.log(`‚ú® +${credits} verifica√ß√µes extras!`);
    } catch (error) {
      console.error('Erro ao adicionar cr√©ditos:', error);
    }
  };

  /**
   * Ativa trial premium
   */
  const activatePremiumTrial = async (days: number) => {
    try {
      const expiresAt = Date.now() + (days * 24 * 60 * 60 * 1000);
      await AsyncStorage.setItem('@checknow:premium_trial_expires', expiresAt.toString());
      
      console.log(`‚≠ê ${days} dias de Premium ativados!`);
    } catch (error) {
      console.error('Erro ao ativar premium trial:', error);
    }
  };

  // Valores computados
  const currentStepConfig = TUTORIAL_STEPS[state.currentStepIndex] || null;
  const progressPercentage = (state.currentStepIndex / state.totalSteps) * 100;
  const currentLevelReward = LEVEL_REWARDS.find(r => r.level === state.currentLevel) || null;

  return (
    <TutorialContext.Provider
      value={{
        state,
        startTutorial,
        nextStep,
        previousStep,
        skipTutorial,
        skipStep,
        completeTutorial,
        completeStep,
        resetTutorial,
        currentStepConfig,
        progressPercentage,
        currentLevelReward,
        allSteps: TUTORIAL_STEPS
      }}
    >
      {children}
    </TutorialContext.Provider>
  );
}

/**
 * Hook para usar o TutorialContext
 */
export function useTutorial() {
  const context = useContext(TutorialContext);
  
  if (!context) {
    throw new Error('useTutorial deve ser usado dentro de TutorialProvider');
  }
  
  return context;
}
